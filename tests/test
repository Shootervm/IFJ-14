
# Test script
# Vojtech MaÅ¡ek (xmasek15)

DEBUG=false
mem_check=false

if [ $# -gt 0 ]; then

	for arg in "${@}"
	do
		if [[ "debug" == "$arg" ]]; then
			DEBUG=true
		fi

		if [[ "mem" == "$arg"  ]]; then
			mem_check=true
		fi
	done
fi

rm ./*.out 2>/dev/null



BIN="./test_ifj"

TESTS=(	#this is array of keys to coded tests (will be used as argument for project)
			"kmp"
			"cstring"
			"stack"
			"tree"
			"buildin"
		)

FILE_OUT_TESTS=(	#this is array of keys to tests that need file redirection
					"cstring"
					"stack"
					"tree"
				)

red='\e[0;31m'
green='\e[0;32m'
color2='\e[0;33m'
color='\e[0;34m'
NC='\e[0m' # No Color


if [[ $DEBUG == true ]]; then
	make -B FLAGS='-DDEBUG -g -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Wunreachable-code -Winit-self -Werror-implicit-function-declaration'
else
	make -B FLAGS='-g -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Wunreachable-code -Winit-self -Werror-implicit-function-declaration'
fi

 #1>/dev/null 2>/dev/null 

rm ./*.o ../*.o .depend ../.depend 2>/dev/null

valgrind_additonal_opt="-v --track-origins=yes --leak-check=full --malloc-fill=0xFF --free-fill=0xFF"

for test in "${TESTS[@]}"
do
	#if array contains element
	if [[ "${FILE_OUT_TESTS[@]}" =~ "${test}" || "${FILE_OUT_TESTS[${#FILE_OUT_TESTS[@]}-1]}" == "${test}" ]]; then
		#echo "*************************************contained*********************************************************"
		"$BIN" "$test" &>"$test".out
		echo "*** Testing of $test ***"

		if [[ "$(tail "$test".out)" =~ "OK. Everything is fine." ]]; then
			echo -e "${green}OK.${NC} In $test is everything fine."
			rm "$test".out
		else
			echo -e "${red}ERROR${NC} has occured during test of $test ! ${color2}LOG:${NC} \"$test.out\"  ${color2}Try running:${NC} \"$BIN $test\" ."
		fi
	else
		result=$("$BIN" "$test" 2>&1)
		echo "$result"
		if [[ "$result" =~ "Result: Failed 0" ]]; then
			echo -e "${green}OK.${NC} In $test is everything fine."
		else
			echo -e "${red}ERROR${NC} has occured during test of $test ! If needed try running \"$BIN $test\" ."
		fi
	fi

	if [[ $mem_check == true ]]; then
		valgrind_oks=0
		valgrind --log-file=valgrind."$test".out "$BIN" "$test" 1>/dev/null 2>/dev/null
		if [[ $(tail -n 1 valgrind."$test".out) =~ "ERROR SUMMARY: 0 errors" ]]; then
			echo -e "${green}OK.${NC} valgrind of $test is error free."
			valgrind "$valgrind_additonal_opt" --log-file=valgrind."$test".out  "$BIN" "$test" 1>/dev/null 2>/dev/null
			if [[ $(tail -n 1 valgrind."$test".out) =~ "ERROR SUMMARY: 0 errors" ]]; then
				echo -e "${green}OK.${NC} Advanced valgrind of $test is error free."
				valgrind_oks=$((valgrind_oks+1))
			else
				echo -e "${red}ERROR${NC} has occured in valgrind of $test ! ${color2}LOG:${NC} \"valgrind.$test.out\" ${color2}Try running:${NC} \"valgrind $valgrind_additonal_opt $BIN $test\""
			fi
		else
			echo -e "${red}ERROR${NC} has occured in valgrind of $test ! ${color2}LOG:${NC} \"valgrind.$test.out\" ${color2}Try running:${NC} \"valgrind $BIN $test\""
		fi

		#valgrinding can be error free but memcheck still could have failed
		if [[ $valgrind_oks == 1 ]]; then

			result=$(tail valgrind."$test".out)
			#If all allocations were freed or if there are no allocations memcheck is useless
			if [[ "$result" =~ "total heap usage: 0" || "$result" =~ "All heap blocks were freed -- no leaks are possible" ]]; then
				valgrind_oks=6
			else
				if [[ "$result" =~ "still reachable: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "${red}ERROR${NC} [ ${color}still reachable memory${NC} ] has occured in memcheck of $test !"
				fi

				if [[ "$result" =~ "suppressed: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "${red}ERROR${NC} [ ${color}suppressed memory${NC} ] has occured in memcheck of $test !"
				fi

				if [[ "$result" =~ "possibly lost: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "${red}ERROR${NC} [ ${color}possibly lost memory${NC} ] has occured in memcheck of $test !"
				fi

				if [[ "$result" =~ "indirectly lost: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "${red}ERROR${NC} [ ${color}indirectly lost memory${NC} ] has occured in memcheck of $test !"
				fi

				if [[ "$result" =~ "definitely lost: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "${red}ERROR${NC} [ ${color}definitely lost memory${NC} ] has occured in memcheck of $test !"
				fi
			fi

			#Checking how many valgrind errors and warnings has occured.
			if [[ $valgrind_oks == 6 ]]; then
				echo -e "${green}OK.${NC} Memcheck of $test is error free."
				rm valgrind."$test".out
			else
					echo -e "${color2}LOG:${NC} \"valgrind.$test.out\" ${color2}Try running:${NC} \"valgrind $valgrind_additonal_opt $BIN $test\""

			fi
		fi


	fi

done

#rm test_ifj 