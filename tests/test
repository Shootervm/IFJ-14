#!/bin/bash
# Test script
# Vojtech MaÅ¡ek (xmasek15)

DEBUG=false
mem_check=false
tests=true

DELETE=false
NO_DELETE=false

MODULES=false
PROJECT=false

ALL=true
OURS=false
SKAL=false
SCANNER=false
EXPR=false
SYNTAX=false
STRINGS=false
BINARY=false
SHOW_OK=false
FLOAT_ERRORS=false
OPERATIONS=false

if [ $# -gt 0 ]; then

	for arg in "${@}"
	do
		if [[ "delete" == "$arg" ]]; then
			DELETE=true
		fi

		if [[ "log" == "$arg" ]]; then			# param "log" to archive all logs
			NO_DELETE=true
		fi
		
		if [[ "debug" == "$arg" ]]; then
			DEBUG=true
		fi

		if [[ "mem" == "$arg"  ]]; then
			mem_check=true
		fi

		if [[ "modules" == "$arg" ]]; then
			MODULES=true
			tests=false
		fi

		if [[ "project" == "$arg" ]]; then
			PROJECT=true
			tests=false
		fi

		if [[ "ours" == "$arg" ]]; then			# param "log" to archive all logs
			OURS=true
			ALL=false
		fi

		if [[ "scanner" == "$arg" ]]; then			# param "log" to archive all logs
			SCANNER=true
			ALL=false
		fi

		if [[ "expr" == "$arg" ]]; then			# param "log" to archive all logs
			EXPR=true
			ALL=false
		fi

		if [[ "syntax" == "$arg" ]]; then			# param "log" to archive all logs
			SYNTAX=true
			ALL=false
		fi

		if [[ "float" == "$arg" ]]; then			# param "log" to archive all logs
			FLOAT_ERRORS=true
			ALL=false
		fi

		if [[ "binary" == "$arg" ]]; then			# param "log" to archive all logs
			BINARY=true
			ALL=false
		fi

		if [[ "strings" == "$arg" ]]; then			# param "log" to archive all logs
			STRINGS=true
			ALL=false
		fi

		if [[ "skal" == "$arg" ]]; then			# param "log" to archive all logs
			SKAL=true
			ALL=false
		fi

		if [[ "operations" == "$arg" ]]; then			# param "log" to archive all logs
			OPERATIONS=true
			ALL=false
		fi

		if [[ "ok" == "$arg" ]]; then			# param "log" to archive all logs
			SHOW_OK=true
		fi

	done
fi

rm ./*.out 2>/dev/null



BIN_TEST="./test_ifj"

I_TESTS=(	#this is array of keys to coded tests of instructions(will be used as argument for project)
			"I_ASSIGN"
			"I_PUSH"

			"I_ADD"
			"I_SUB"
			"I_MUL"
			"I_DIV"

			"I_LESS"
			"I_GREATER"
			"I_LESS_EQUAL"
			"I_GREATER_EQUAL"
			"I_EQUAL"
			"I_NOT_EQUAL"

			"I_AND"
			"I_OR"
			"I_XOR"
			"I_NOT"

			"I_HARDCODE_1"
		)

TESTS=(	#this is array of keys to coded tests (will be used as argument for project)
			"kmp"
			"cstring"
			#"stack"
			"tree"
			"buildin"
			"inter"
			
		)


red='\e[0;31m'
green='\e[0;32m'
color2='\e[0;33m'
color='\e[0;34m'
NC='\e[0m' # No Color



#Tests to verify moduls and functions
if [[ $tests == true || $MODULES == true  ]]; then

	if [[ $DEBUG == true ]]; then
		make -B FLAGS='-DDEBUG -g -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Wunreachable-code -Winit-self -Werror-implicit-function-declaration' &>"$test".out
	else
		make -B FLAGS='-g -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Wunreachable-code -Winit-self -Werror-implicit-function-declaration' &>"$test".out
	fi
	MAKE_RET=$?

	if [[ "$MAKE_RET" != "0" ]]; then
        echo -e "${red}ERROR:${color2} Failed to build project.${NC}"
        exit 99
    fi

	rm ./*.o ../*.o .depend ../.depend 2>/dev/null

	valgrind_additonal_opt="-v --track-origins=yes --leak-check=full --malloc-fill=0xFF --free-fill=0xFF"

	for test in "${TESTS[@]}"
	do
		#if array contains element
		#if [[ "${FILE_OUT_TESTS[@]}" =~ "${test}" || "${FILE_OUT_TESTS[${#FILE_OUT_TESTS[@]}-1]}" == "${test}" ]]; then
		
		echo "*** Testing of $test ***"
		if [[ "inter" == "${test}" ]]; then

			for inst in "${I_TESTS[@]}"; do
				"$BIN_TEST" "$test" "$inst" &>"$test"."$inst".out
				if [[ "$(tail "$test"."$inst".out)" =~ "OK. Everything is fine." ]]; then
					echo -e "${green}OK.${NC} $inst is correct."
					rm "$test"."$inst".out
				else
					echo -e "${red}ERROR${NC} has occured during test of $test $inst ! \t ${color2}LOG:${NC} \"$test.$inst.out\"  ${color2}Try running:${NC} \"$BIN_TEST $test $inst\" ."
				fi

			done

		else
			"$BIN_TEST" "$test" &>"$test".out
			if [[ "$(tail "$test".out)" =~ "OK. Everything is fine." ]]; then
				echo -e "${green}OK.${NC} In $test is everything fine."
				rm "$test".out
			else
				echo -e "${red}ERROR${NC} has occured during test of $test ! \t ${color2}LOG:${NC} \"$test.out\"  ${color2}Try running:${NC} \"$BIN_TEST $test\" ."
			fi

		fi

		if [[ $mem_check == true ]]; then
			valgrind_oks=0
			valgrind --log-file=valgrind."$test".out "$BIN_TEST" "$test" 1>/dev/null 2>/dev/null
			if [[ $(tail -n 1 valgrind."$test".out) =~ "ERROR SUMMARY: 0 errors" ]]; then
				echo -e "${green}OK.${NC} valgrind of $test is error free."
				valgrind "$valgrind_additonal_opt" --log-file=valgrind."$test".out  "$BIN_TEST" "$test" 1>/dev/null 2>/dev/null
				if [[ $(tail -n 1 valgrind."$test".out) =~ "ERROR SUMMARY: 0 errors" ]]; then
					echo -e "${green}OK.${NC} Advanced valgrind of $test is error free."
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "${red}ERROR${NC} has occured in valgrind of $test ! ${color2}LOG:${NC} \"valgrind.$test.out\" ${color2}Try running:${NC} \"valgrind $valgrind_additonal_opt $BIN_TEST $test\""
				fi
			else
				echo -e "${red}ERROR${NC} has occured in valgrind of $test ! ${color2}LOG:${NC} \"valgrind.$test.out\" ${color2}Try running:${NC} \"valgrind $BIN_TEST $test\""
			fi

			#valgrinding can be error free but memcheck still could have failed
			if [[ $valgrind_oks == 1 ]]; then

				result=$(tail valgrind."$test".out)
				#If all allocations were freed or if there are no allocations memcheck is useless
				if [[ "$result" =~ "total heap usage: 0" || "$result" =~ "All heap blocks were freed -- no leaks are possible" ]]; then
					valgrind_oks=6
				else
					if [[ "$result" =~ "still reachable: 0" ]]; then
						valgrind_oks=$((valgrind_oks+1))
					else
						echo -e "${red}ERROR${NC} [ ${color}still reachable memory${NC} ] has occured in memcheck of $test !"
					fi

					if [[ "$result" =~ "suppressed: 0" ]]; then
						valgrind_oks=$((valgrind_oks+1))
					else
						echo -e "${red}ERROR${NC} [ ${color}suppressed memory${NC} ] has occured in memcheck of $test !"
					fi

					if [[ "$result" =~ "possibly lost: 0" ]]; then
						valgrind_oks=$((valgrind_oks+1))
					else
						echo -e "${red}ERROR${NC} [ ${color}possibly lost memory${NC} ] has occured in memcheck of $test !"
					fi

					if [[ "$result" =~ "indirectly lost: 0" ]]; then
						valgrind_oks=$((valgrind_oks+1))
					else
						echo -e "${red}ERROR${NC} [ ${color}indirectly lost memory${NC} ] has occured in memcheck of $test !"
					fi

					if [[ "$result" =~ "definitely lost: 0" ]]; then
						valgrind_oks=$((valgrind_oks+1))
					else
						echo -e "${red}ERROR${NC} [ ${color}definitely lost memory${NC} ] has occured in memcheck of $test !"
					fi
				fi

				#Checking how many valgrind errors and warnings has occured.
				if [[ $valgrind_oks == 6 ]]; then
					echo -e "${green}OK.${NC} Memcheck of $test is error free."
					rm valgrind."$test".out
				else
						echo -e "${color2}LOG:${NC} \"valgrind.$test.out\" ${color2}Try running:${NC} \"valgrind $valgrind_additonal_opt $BIN_TEST $test\""

				fi
			fi


		fi

	done

fi


#Tests to verify vhole project
if [[ $tests == true || $PROJECT == true  ]]; then


	function run_test 
	{
		local OK=false
		local source="$1"
		local dir_name=$(dirname "$source")
		local file_name=$(basename -s .pas "$source")
		local file="$dir_name/$file_name"
		local exit_code_correct=$(tail -n 1 "$file.exit.correct")


		#touch "$file.current.stdout"

		cat "$file.stdin" 2>/dev/null | "$BIN_PROJECT" "$source" 1>"$file.current.stdout" 2>"$file.current.stderr"
		exit_code="$?"


		
		diff "$file.current.stdout" "$file.stdout.correct" >$file.diff.out
		diff_code=$?
		if [[ "$diff_code" == "0"  &&  "$exit_code" == "$exit_code_correct" ]]; then
			if [[ $SHOW_OK == true ]]; then			# param "log" to archive all logs
				echo -e "[  ${green}OK${NC}  ]\tfile: $file_name\t\t\t\treturn code: $exit_code_correct"
			else
				echo -e "[  ${green}OK${NC}  ]\tfile: $file_name"
			fi
			OK=true
			((OK_count++))
		else
			echo -e "[ ${red}FAIL${NC} ]\tfile: $file_name"

			if [[ "$exit_code" != "$exit_code_correct" ]]; then
				echo -e "${color2}\t\tExit code: $exit_code and should be $exit_code_correct ${NC}"
			fi

			if [[ "$diff_code" != "0" ]]; then
				echo -e "${color2}\t\tERROR: DIFF is wronng. See $file.diff.out${NC}"
			fi
		fi

		if [[ $mem_check == true ]]; then
			valgrind_oks=0
			valgrind $valgrind_additonal_opt --log-file=./files/valgrind."$file_name".out  "$BIN_PROJECT" "$source" 1>/dev/null 2>/dev/null
			result=$(tail ./files/valgrind."$file_name".out)
			#If all allocations were freed or if there are no allocations memcheck is useless
			if [[ "$result" =~ "total heap usage: 0" || "$result" =~ "All heap blocks were freed -- no leaks are possible" ]]; then
				valgrind_oks=5
			else
				if [[ "$result" =~ "still reachable: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "\t[ ${red}FAIL${NC} ] ${color}still reachable memory${NC} has occured in memcheck of $file_name !"
				fi

				if [[ "$result" =~ "suppressed: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "\t[ ${red}FAIL${NC} ] ${color}suppressed memory${NC} has occured in memcheck of $file_name !"
				fi

				if [[ "$result" =~ "possibly lost: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "\t[ ${red}FAIL${NC} ] ${color}possibly lost memory${NC} has occured in memcheck of $file_name !"
				fi

				if [[ "$result" =~ "indirectly lost: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "\t[ ${red}FAIL${NC} ] ${color}indirectly lost memory${NC} has occured in memcheck of $file_name !"
				fi

				if [[ "$result" =~ "definitely lost: 0" ]]; then
					valgrind_oks=$((valgrind_oks+1))
				else
					echo -e "\t[ ${red}FAIL${NC} ] ${color}definitely lost memory${NC} has occured in memcheck of $file_name !"
				fi
			fi

			#Checking how many valgrind errors and warnings has occured.
			if [[ $valgrind_oks == 5 ]]; then
				echo -e "\t\t[  ${green}OK${NC}  ] Memcheck of $file_name is error free."
				rm ./files/valgrind."$file_name".out
			else
				echo -e "\t\t${color2}LOG:${NC}\t \"valgrind.$file_name.out\" ${color2}Try running:${NC} \"valgrind $valgrind_additonal_opt $BIN_PROJECT $source\""

			fi
		fi


		if [[ $NO_DELETE == false && ( $OK == true || $DELETE == true ) ]]; then
			rm -rf "$file.current.stdout" "$file.current.stderr" "$file.diff.out"
		fi
	}


	BIN_PROJECT="../projekt_ifj"

	cd ..                   #POZOR make
	if [[ $DEBUG == true ]]; then
		make -B FLAGS='-DDEBUG -g -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Wunreachable-code -Winit-self -Werror-implicit-function-declaration' &>"$test".out
	else
		make -B FLAGS='-g -Wstrict-prototypes -Wstrict-overflow=5 -Wwrite-strings -Wunreachable-code -Winit-self -Werror-implicit-function-declaration' &>"$test".out
	fi
    MAKE_RET=$?
	cd ./tests/             #POZOR make

	read -a FILES_SKAL 					<<< $( find ./files/skal -name '*.pas' | sort) #filling up the field of paths to files
	read -a FILES_OURS 					<<< $( find ./files/ours -maxdepth 1 -name '*.pas' | sort) #filling up the field of paths to files
	read -a FILES_OURS_SCANNER 			<<< $( find ./files/ours/scanner -maxdepth 1 -name  '*.pas' | sort)
	read -a FILES_OURS_EXPR 			<<< $( find ./files/ours/scanner/expr -name '*.pas' | sort)
	read -a FILES_OURS_SYNTAX_ERRORS 	<<< $( find ./files/ours/scanner/syntax_erors -name '*.pas' | sort)
	read -a FILES_OURS_FLOAT_ERRORS 	<<< $( find ./files/ours/scanner/float_errors -name '*.pas' | sort)
	read -a FILES_OURS_STRINGS 			<<< $( find ./files/ours/scanner/strings -name '*.pas' | sort)
	read -a FILES_OURS_BINARY 			<<< $( find ./files/ours/scanner/binary -name '*.pas' | sort)
	read -a FILES_OURS_OPERATIONS 		<<< $( find ./files/ours/operations -name '*.pas' | sort)


	if [[ "$MAKE_RET" != "0" ]]; then
        echo -e "${red}ERROR:${color2} Failed to build project.${NC}"
        exit 99
    fi

	if [[ $ALL == true || $OURS == true ]]; then
		counter=0
	    OK_count=0
	    echo "-------------------------------------Our-TESTs--------------------------------------------------------------------------"
	    for file in "${FILES_OURS[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $SCANNER == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------SCANNER--------------------------------------------------------------------------"
	    for file in "${FILES_OURS_SCANNER[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"

		# EXPR=true
		# SYNTAX=true
		# STRINGS=true

	fi

	counter=0
	if [[ $ALL == true || $EXPR == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------EXPR--------------------------------------------------------------------------"
	    for file in "${FILES_OURS_EXPR[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $SYNTAX == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------SYNTAX-ERRORS--------------------------------------------------------------------------"
	    for file in "${FILES_OURS_SYNTAX_ERRORS[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $FLOAT_ERRORS == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------FLOAT-ERRORS--------------------------------------------------------------------------"
	    for file in "${FILES_OURS_FLOAT_ERRORS[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $STRINGS == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------STRINGS-------------------------------------------------------------------------------"
	    for file in "${FILES_OURS_STRINGS[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $BINARY == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------BINARY-------------------------------------------------------------------------------"
	    for file in "${FILES_OURS_BINARY[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $OPERATIONS == true ]]; then
	    counter=0
	    OK_count=0
	    echo "---------------------------------------OPERATIONS-------------------------------------------------------------------------------"
	    for file in "${FILES_OURS_OPERATIONS[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

	counter=0
	if [[ $ALL == true || $SKAL == true ]]; then
	    counter=0
	    OK_count=0
	    echo "-------------------------------------TESTy-od-skala + pridane a upravene nase---------------------------------------------------------------------"
	    for file in "${FILES_SKAL[@]}"; do
		    run_test $file
		    ((counter++))
	    done
	    echo -e "TESTS:\t\t${green}PASSED: $OK_count ${NC} of $counter"
	fi

fi



# I_ASSIGN
# I_ADD
# I_SUB
# I_MUL
# I_DIV
# I_LESS
# I_GREATER
# I_LESS_EQUAL
# I_GREATER_EQUAL
# I_EQUAL
# I_NOT_EQUAL































